{"version":3,"sources":["images/logo.png","video/loop.mp4","component/Navbar.js","component/Landing.js","component/Demo.js","component/Service.js","component/Client.js","component/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","state","francais","className","id","src","logo","alt","this","props","languageFr","onClick","goFr","goAn","Component","Landing","playVideo","refs","vidRef","play","document","getElementById","pauseVideo","pause","isMobile","undefined","isTablet","onMouseEnter","onMouseLeave","ref","loop","type","autoPlay","muted","withGetScreen","Demo","Service","Client","Contact","App","setState","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,6NCyC5BC,E,YAlCb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,UAAU,GAJA,E,mHAiBZ,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,OAAOC,GAAG,OAAOC,IAAKC,IAAMC,IAAI,SAC/C,yBAAKJ,UAAU,sBACZK,KAAKC,MAAMC,YAAc,yBAAKN,GAAG,KAAKD,UAAU,2BAAvB,OACxBK,KAAKC,MAAMC,YAAc,yBAAKN,GAAG,KAAKD,UAAU,iBAAiBQ,QAASH,KAAKC,MAAMG,MAA5D,MAC3B,yBAAKT,UAAU,kBAAf,QACEK,KAAKC,MAAMC,YAAc,yBAAKN,GAAG,KAAKD,UAAU,2BAAvB,OAC1BK,KAAKC,MAAMC,YAAc,yBAAKN,GAAG,KAAKD,UAAU,iBAAiBQ,QAASH,KAAKC,MAAMI,MAA5D,a,GA1BfC,a,iCCEfC,E,YACJ,aAAe,IAAD,8BACZ,+CAeFC,UAAY,WACV,EAAKC,KAAKC,OAAOC,OACjBC,SAASC,eAAe,UAAUlB,UAAY,cAlBlC,EAqBdmB,WAAa,WACX,EAAKL,KAAKC,OAAOK,QACjBH,SAASC,eAAe,UAAUlB,UAAY,iBArB9C,EAAKF,MAAQ,GAFD,E,iFASPO,KAAKC,MAAMe,iBAAmCC,IAArBjB,KAAKS,KAAKC,QACtCV,KAAKS,KAAKC,OAAOK,U,+BAkBnB,OAAIf,KAAKC,MAAMe,YAAchB,KAAKC,MAAMiB,WAGpC,yBAAKvB,UAAU,WAAf,sBAWA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,cAAcC,GAAG,QAAQC,IAAKC,IAAMC,IAAI,OACrDoB,aAAcnB,KAAKQ,UACnBY,aAAcpB,KAAKc,aACrB,yBAAKnB,UAAU,mBACb,2BACEC,GAAG,SACHD,UAAU,gBACV0B,IAAI,SACJxB,IAAKyB,IACLC,KAAK,YACLC,UAAQ,EACRF,MAAI,EACJG,OAAK,U,GAxDGnB,aAkEPoB,0BAAcnB,GCvCdoB,E,YA5Bb,aAAe,IAAD,8BACZ,+CAEKlC,MAAQ,GAHD,E,mHAmBZ,OACE,yBAAKE,UAAU,QAAf,Y,GArBaW,aC6BJsB,E,YA5Bb,aAAe,IAAD,8BACZ,+CAEKnC,MAAQ,GAHD,E,mHAmBZ,OACE,yBAAKE,UAAU,WAAf,e,GArBgBW,aC6BPuB,E,YA5Bb,aAAe,IAAD,8BACZ,+CAEKpC,MAAQ,GAHD,E,mHAmBZ,OACE,yBAAKE,UAAU,UAAf,c,GArBeW,aC6BNwB,E,YA5Bb,aAAe,IAAD,8BACZ,+CAEKrC,MAAQ,GAHD,E,mHAmBZ,OACE,yBAAKE,UAAU,WAAf,c,GArBgBW,aCyCPyB,E,YAtCb,aAAe,IAAD,8BACZ,+CAOF3B,KAAO,WACL,EAAK4B,SAAS,CAAE9B,YAAY,KAThB,EAWdG,KAAO,WACL,EAAK2B,SAAS,CAAE9B,YAAY,KAT5B,EAAKT,MAAQ,CACXS,YAAY,GAJF,E,sEAwBZ,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAQO,WAAYF,KAAKP,MAAMS,WAAYG,KAAML,KAAKK,KAAMD,KAAMJ,KAAKI,OACvE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAhCUE,aCIE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAASC,eAAe,SD2H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4f466d79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.21d1a755.png\";","module.exports = __webpack_public_path__ + \"static/media/loop.696bc775.mp4\";","import React, { Component } from 'react';\nimport '../App.css';\nimport logo from \"../images/logo.png\"\n\n\n\nclass Navbar extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      francais: true\n    };\n  }\n\n\n  componentDidMount() {\n\n  }\n\n \n\n  render() {\n\n    return (\n      <div className=\"nav\">\n        <img className=\"logo\" id=\"logo\" src={logo} alt=\"logo\" />\n        <div className=\"language-container\">\n          {this.props.languageFr && <div id=\"fr\" className=\"language-texte-selected\" >FR</div>}\n          {!this.props.languageFr && <div id=\"fr\" className=\"language-texte\" onClick={this.props.goFr}>FR</div>}\n          <div className=\"language-slash\"> / </div>\n          {!this.props.languageFr && <div id=\"en\" className=\"language-texte-selected\" > EN</div>}\n          {this.props.languageFr && <div id=\"en\" className=\"language-texte\" onClick={this.props.goAn} > EN</div>}\n        </div>\n\n      </div>\n    )\n  }\n}\n\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport './Landing.css';\nimport logo from \"../images/logo.png\"\nimport loop from \"../video/loop.mp4\";\nimport { withGetScreen } from 'react-getscreen'\n\n\nclass Landing extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n\n\n\n  componentDidMount() {\n    if (!this.props.isMobile() && this.refs.vidRef !== undefined) {\n      this.refs.vidRef.pause();\n    }\n  }\n\n\n\n  playVideo = () => {\n    this.refs.vidRef.play();\n    document.getElementById(\"video1\").className = \"mouseHover\";\n  };\n\n  pauseVideo = () => {\n    this.refs.vidRef.pause();\n    document.getElementById(\"video1\").className = \"mouseNotHover\";\n  };\n\n  render() {\n\n    if (this.props.isMobile() || this.props.isTablet()) {\n      return (\n\n        <div className=\"landing\">\n          mobile ou tablette\n            </div>\n      )\n    }\n\n\n    else {\n\n      return (\n\n        <div className=\"landing\">\n          <img className=\"logoLanding\" id=\"logo2\" src={logo} alt=\"logo\"\n            onMouseEnter={this.playVideo}\n            onMouseLeave={this.pauseVideo} />\n          <div className=\"colorBackground\">\n            <video\n              id=\"video1\"\n              className=\"mouseNotHover\"\n              ref=\"vidRef\"\n              src={loop}\n              type=\"video/mp4\"\n              autoPlay\n              loop\n              muted\n            />\n          </div>\n        </div>\n      )\n\n    }\n  }\n}\n\nexport default withGetScreen(Landing);\n\n","import React, { Component } from 'react';\nimport '../App.css';\n\n\n\n\nclass Demo extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n    \n    };\n  }\n\n\n  componentDidMount() {\n\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"demo\">\n       Demo\n      </div>\n    )\n  }\n}\n\n\nexport default Demo;\n","import React, { Component } from 'react';\nimport '../App.css';\n\n\n\n\nclass Service extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n    \n    };\n  }\n\n\n  componentDidMount() {\n\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"service\">\nservice\n      </div>\n    )\n  }\n}\n\n\nexport default Service;\n","import React, { Component } from 'react';\nimport '../App.css';\n\n\n\n\nclass Client extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n    \n    };\n  }\n\n\n  componentDidMount() {\n\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"client\">\n    Client\n      </div>\n    )\n  }\n}\n\n\nexport default Client;\n","import React, { Component } from 'react';\nimport '../App.css';\n\n\n\n\nclass Contact extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n    \n    };\n  }\n\n\n  componentDidMount() {\n\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"contact\">\n    Contac\n      </div>\n    )\n  }\n}\n\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './component/Navbar.js'\nimport Landing from './component/Landing.js'\nimport Demo from './component/Demo.js'\nimport Service from './component/Service.js'\nimport Client from './component/Client.js'\nimport Contact from './component/Contact.js'\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      languageFr: true\n    };\n  }\n\n  goFr = () => {\n    this.setState({ languageFr: true })\n  }\n  goAn = () => {\n    this.setState({ languageFr: false})\n  \n  }\n\n \n\n\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Navbar languageFr={this.state.languageFr} goAn={this.goAn} goFr={this.goFr} />\n        <Landing />\n        <Demo />\n        <Service />\n        <Client />\n        <Contact />\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}